#!/usr/bin/env php
<?php

require 'autoload.php';

$script = eZScript::instance([
    'description' => "Installer",
    'use-session' => false,
    'use-extensions' => true,
    'use-modules' => false,
    'debug-timing' => true
]);

$script->startup();
$options = $script->getOptions('[languages:][cleandata:][cleanup][exlude-extension-schemas][only-data][embed-dfs-schema][dry-run][only-step:][no-interaction][purge-cache][purge-storage]',
    '[data]',
    array(
        'cleanup' => "Cleanup db before install",
        'exlude-extension-schemas' => "Install only base without extension schema",
        'only-data' => "Install only data without base and extension schema",
        'only-step' => "Step index (comma separated): install only data step without base and extension schema",
        'languages' => "Comma separates language code list, first is primary (default is: ita-IT,eng-GB)",
        'cleandata' => "Override directory of clean db_schema.dba and db_data.dba files",
        'embed-dfs-schema' => "Install dfs schema in main db",
        'dry-run' => "Only check vars",
        'no-interaction' => 'Don\'t ask don\'t tell',
        'purge-cache' => 'Delete cache directory before install',
        'purge-storage' => 'Delete storage directory before install',
    )
);

\eZINI::instance()->setVariable('DatabaseSettings', 'ConnectRetries', '100');
$fileHandler = \eZINI::instance('file.ini')->variable('ClusteringSettings', 'FileHandler');
\eZINI::instance('file.ini')->setVariable('ClusteringSettings', 'FileHandler', 'eZFSFileHandler');
\eZINI::instance()->setVariable('ContentSettings', 'ViewCaching', 'disabled');
\eZINI::instance()->setVariable('TemplateSettings', 'TemplateCache', 'disabled');
\eZINI::instance()->setVariable('TemplateSettings', 'TemplateCompile', 'disabled');
\eZINI::instance()->setVariable('OverrideSettings', 'Cache', 'disabled');
\eZINI::instance()->setVariable('ContentSettings', 'StaticCache', 'disabled');
//\eZINI::instance()->setVariable('SearchSettings', 'SearchEngine', 'eZSearchEngine');


$cli = eZCLI::instance();
$script->initialize();
$output = new ezcConsoleOutput();

/** @var eZDBInterface $db */
$db = eZDB::instance();
eZDB::setErrorHandling(eZDB::ERROR_HANDLING_EXCEPTIONS);
//eZDebug::setHandleType(eZDebug::HANDLE_EXCEPTION);

try {
    // parameters
    $interactive = !$options['no-interaction'];
    $cleanDb = $options['cleanup'];
    $installBaseSchema = $options['only-data'] === null && $options['only-step'] === null;
    $installExtensionsSchema = !$options['exlude-extension-schemas'];
    $installDfsSchema = $options['embed-dfs-schema'];
    $purgeCache = $options['purge-cache'];
    $purgeStorage = $options['purge-storage'];

    $cleanDataDirectory = $options['cleandata'] ? rtrim($options['cleandata']) : false;

    $languages = $options['languages'] ? $options['languages'] : 'ita-IT,eng-GB';
    $languageList = explode(',', $languages);

    $dataDir = $options['arguments'][0];
    if ($dataDir && !is_dir($dataDir)) {
        throw new Exception("Directory $dataDir not found");
    }

    // install
    $installer = new \Opencontent\Installer\Installer($db, $dataDir);

    if ($options['verbose']) {
        $installer->getLogger()->isVerbose = true;
    }

    $installer->getLogger()->warning("Using db " . $db->DB);

    $continue = true;
    if ($interactive) {
        $question = ezcConsoleQuestionDialog::YesNoQuestion($output, "Continue?", "y");
        $continue = ezcConsoleDialogViewer::displayDialog($question) == "y";
    }

    if ($options['dry-run']) {
        $installer->setDryRun();
    }

    if ($purgeCache) {
        if ($installer->canInstallSchema()) {
            $cacheDir = eZSys::cacheDirectory();
            $cacheDfsDir = eZINI::instance('file.ini')->variable('eZDFSClusteringSettings', 'MountPointPath') . $cacheDir;
            $installer->getLogger()->info("Remove cache directories $cacheDfsDir, $cacheDir");
            $continue = true;
            if ($interactive) {
                $question = ezcConsoleQuestionDialog::YesNoQuestion($output, "Continue?", "y");
                $continue = ezcConsoleDialogViewer::displayDialog($question) == "y";
            }
            if (is_dir($cacheDfsDir)) {
                $allowedDirs = $modifiedAllowedDirs = eZINI::instance()->variable('FileSettings', 'AllowedDeletionDirs');
                $dirRealPath = dirname(realpath($cacheDfsDir)) . DIRECTORY_SEPARATOR;
                $modifiedAllowedDirs[] = $dirRealPath;
                eZINI::instance()->setVariable('FileSettings', 'AllowedDeletionDirs', $modifiedAllowedDirs);
                eZDir::recursiveDelete($cacheDfsDir);
                eZINI::instance()->setVariable('FileSettings', 'AllowedDeletionDirs', $allowedDirs);
            }
            if (is_dir($cacheDir)) {
                eZDir::recursiveDelete($cacheDir);
            }
        }else{
            $installer->getLogger()->notice("Purge cache not allowed in {$installer->getType()} installer");
        }
    }

    if ($purgeStorage) {
        if ($installer->canInstallSchema()) {
            $storageDir = eZSys::storageDirectory();
            $storageDfsDir = eZINI::instance('file.ini')->variable('eZDFSClusteringSettings', 'MountPointPath') . $storageDir;
            $installer->getLogger()->info("Remove storage directories $storageDfsDir, $storageDir");
            $continue = true;
            if ($interactive) {
                $question = ezcConsoleQuestionDialog::YesNoQuestion($output, "Continue?", "y");
                $continue = ezcConsoleDialogViewer::displayDialog($question) == "y";
            }
            if (is_dir($storageDfsDir)) {
                $allowedDirs = $modifiedAllowedDirs = eZINI::instance()->variable('FileSettings', 'AllowedDeletionDirs');
                $dirRealPath = dirname(realpath($storageDfsDir)) . DIRECTORY_SEPARATOR;
                $modifiedAllowedDirs[] = $dirRealPath;
                eZINI::instance()->setVariable('FileSettings', 'AllowedDeletionDirs', $modifiedAllowedDirs);
                eZDir::recursiveDelete($storageDfsDir);
                eZINI::instance()->setVariable('FileSettings', 'AllowedDeletionDirs', $allowedDirs);
            }
            if (is_dir($storageDir)) {
                eZDir::recursiveDelete($storageDir);
            }
        }else{
            $installer->getLogger()->notice("Purge storage not allowed in {$installer->getType()} installer");
        }
    }

    if ($installer->canInstallSchema()) {
        $schemaInstaller = $installer->installSchema($cleanDb, $installBaseSchema, $installExtensionsSchema, $languageList, $cleanDataDirectory, $installDfsSchema);
        if ($cleanDb) {
            $installer->getLogger()->info("Cleanup solr");
            if (!$installer->isDryRun()) {
                $solr = new eZSolr();
                $solr->cleanup(true, true);
            }
        }
    }

    \eZINI::instance('file.ini')->setVariable('ClusteringSettings', 'FileHandler', $fileHandler);

    if ($installer->needUpdate() || $options['only-step'] !== null || $installer->isDryRun()) {
        $installer->install($options);

        if ($installer->canInstallSchema() && $installBaseSchema && $installer->getInstallerVars()->offsetGet('schema_already_exists') === false) {
            $schemaInstaller->expiryPassword();
        }

        if (!$installer->isDryRun()) {
            $installer->getLogger()->info("Clear all cache");
            //$cli->setIsQuiet(true);
            $cacheHelper = new eZCacheHelper($cli, $script);
            $cacheHelper->clearItems(eZCache::fetchList(), false);
            //$cli->setIsQuiet($script->isQuiet());
        }
    }else{
        $installer->getLogger()->info("No update needed");
    }

} catch (Throwable $e) {
    if ($e instanceof eZDBException) {
        if ($db->TransactionCounter > 0) {
            $db->rollback();
        }
    }

    if ($e instanceof \Symfony\Component\Yaml\Exception\ParseException) {
        $cli->error($e->getMessage() . ' at line ' . $e->getParsedLine() . ' of ' . $e->getParsedFile());
    } else {
        $cli->error($e->getMessage());
    }

    if ($options['debug']) {
        $cli->error('At line ' . $e->getLine() . ' of ' . $e->getFile());
        $cli->output($e->getTraceAsString());
    }
}

$script->shutdown();

// php bin/php/ezsqldumpschema.php --type=postgresql --user=openpa --host=db.consorzio-astratto --password= --output-array --output-types=data ez20150103_openpa_rivadelgarda openpa_tools/installer/cleandata/db_data.dba