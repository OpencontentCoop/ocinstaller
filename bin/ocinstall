#!/usr/bin/env php
<?php

use Opencontent\Installer\Installer;
use Opencontent\Installer\SlackNotify;
use Symfony\Component\Yaml\Exception\ParseException;

require 'autoload.php';

$script = eZScript::instance([
    'description' => "
                         =:                       
                        .***=-.                   
                      ##.*******=-.               
                .##=  --.***********=-.           
                 ++-    .**************+-         
            :-:    ...  .***************+         
            #@@    +%+  .***************+         
            ...         .***************+         
            .:  =@@#     -=+************+         
            +*. :++= .@@+   .-=*********+         
                      ==:       :=+*****+         
               +%-                 .-=**+         
         .            @@@@@-           :-         
         +*+-.        @@@@@-        .:-=-         
         +*****=-.    +++++.    .:-=====-         
         +*********=:        .-=========-         
         +************=-..:-============-         
         +**************+===============-         
         +**************+===============-         
         +**************+===============-         
         =**************+===============-         
          .:=+**********+============-.           
              .-=+******+========-:               
                  .-=***+====-:.                  
                      .-=-:.      
                                                                               
    #########################################
    ######## OpenContent Installer ##########
    #########################################
    
    Install eZPublish Legacy based on an installer.yml in DATA path
    Learn more (but still incomplete) at https://github.com/OpencontentCoop/ocinstaller
    
    ",
    'use-session' => false,
    'use-extensions' => true,
    'use-modules' => false,
    'debug-timing' => true,
]);

$optionsConfigList = [
    [
        'identifier' => 'languages',
        'config' => '[languages:]',
        'help' => 'Comma separates language code list, first is primary (default is: ita-IT,eng-GB)',
    ],
    [
        'identifier' => 'cleandata',
        'config' => '[cleandata:]',
        'help' => 'Override directory of clean db_schema.dba and db_data.dba files',
    ],
    [
        'identifier' => 'cleanup',
        'config' => '[cleanup]',
        'help' => 'Cleanup db before install',
    ],
    [
        'identifier' => 'exlude-extension-schemas',
        'config' => '[exlude-extension-schemas]',
        'help' => 'Install only base without extension schema',
    ],
    [
        'identifier' => 'only-schema',
        'config' => '[only-schema]',
        'help' => 'Install only base and extension schema without data',
    ],
    [
        'identifier' => 'only-data',
        'config' => '[only-data]',
        'help' => 'Install only data without base and extension schema',
    ],
    [
        'identifier' => 'embed-dfs-schema',
        'config' => '[embed-dfs-schema]',
        'help' => 'Install dfs schema in main db',
    ],
    [
        'identifier' => 'dry-run',
        'config' => '[dry-run]',
        'help' => 'Only check vars',
    ],
    [
        'identifier' => 'ask',
        'config' => '[ask]',
        'help' => 'Wait user confirmation to run each step',
    ],
    [
        'identifier' => 'force',
        'config' => '[force]',
        'help' => 'Ignore version check',
    ],
    [
        'identifier' => 'only-step',
        'config' => '[only-step:]',
        'help' => 'Step index (comma separated): install only data step without base and extension schema',
    ],
    [
        'identifier' => 'no-interaction',
        'config' => '[no-interaction]',
        'help' => 'Don\'t ask don\'t tell',
    ],
    [
        'identifier' => 'purge-cache',
        'config' => '[purge-cache]',
        'help' => 'Delete cache directory before install',
    ],
    [
        'identifier' => 'purge-storage',
        'config' => '[purge-storage]',
        'help' => 'Delete storage directory before install',
    ],
    [
        'identifier' => 'vars',
        'config' => '[vars:]',
        'help' => 'Add or override installer vars in format key:value,key2:value2',
    ],
    [
        'identifier' => 'slack-endpoint',
        'config' => '[slack-endpoint:]',
        'help' => 'Notify result to slack endpoint',
    ],
    [
        'identifier' => 'update',
        'config' => '[update]',
        'help' => 'Run only if the installer has been run at least once (update mode)',
    ],
    [
        'identifier' => 'list',
        'config' => '[list]',
        'help' => 'List installed modules',
    ],
];
$configs = array_column($optionsConfigList, 'config');
sort($configs);
$optionsHelp = [];
foreach ($optionsConfigList as $optionsConfig) {
    $optionsHelp[$optionsConfig['identifier']] = $optionsConfig['help'];
}
ksort($optionsHelp);

$script->startup();
$options = $script->getOptions(implode('', $configs), '[data]', $optionsHelp);

eZINI::instance()->setVariable('DatabaseSettings', 'ConnectRetries', '100');
$fileHandler = eZINI::instance('file.ini')->variable('ClusteringSettings', 'FileHandler');
eZINI::instance('file.ini')->setVariable('ClusteringSettings', 'FileHandler', 'eZFSFileHandler');
eZINI::instance()->setVariable('ContentSettings', 'ViewCaching', 'disabled');
eZINI::instance()->setVariable('TemplateSettings', 'TemplateCache', 'disabled');
eZINI::instance()->setVariable('TemplateSettings', 'TemplateCompile', 'disabled');
eZINI::instance()->setVariable('OverrideSettings', 'Cache', 'disabled');
eZINI::instance()->setVariable('ContentSettings', 'StaticCache', 'disabled');
//\eZINI::instance()->setVariable('SearchSettings', 'SearchEngine', 'eZSearchEngine');


$cli = eZCLI::instance();
$script->initialize();
$output = new ezcConsoleOutput();

/** @var eZDBInterface $db */
$db = eZDB::instance();
eZDB::setErrorHandling(eZDB::ERROR_HANDLING_EXCEPTIONS);
//eZDebug::setHandleType(eZDebug::HANDLE_EXCEPTION);

try {
    // parameters
    $interactive = !$options['no-interaction'];
    $cleanDb = $options['cleanup'];
    $installBaseSchema = $options['only-data'] === null && $options['only-step'] === null;
    $installExtensionsSchema = !$options['exlude-extension-schemas'];
    $installDfsSchema = $options['embed-dfs-schema'];
    $purgeCache = $options['purge-cache'];
    $purgeStorage = $options['purge-storage'];
    $installOnlySchema = $options['only-schema'] !== null;
    $slackEndpoint = $options['slack-endpoint'];

    if ($cleanDb && $options['only-step']) {
        throw new Exception("Cannot set --cleanup and --only-step arguments at the same time");
    }

    $cleanDataDirectory = $options['cleandata'] ? rtrim($options['cleandata']) : false;

    $languages = $options['languages'] ?: 'ita-IT,eng-GB';
    $languageList = explode(',', $languages);

    $dataDir = Installer::parseDataDir($options['arguments'][0]);

    // install
    $installer = new Installer($db, $dataDir);
    if ($options['list']){
        $rows = [['Name', 'Available', 'Current',]];
        foreach($installer->getCurrentVersions() as $name => $versions){
            $rows[] = [$name, $versions['available'], $versions['current'],];
        }

        $table = new ezcConsoleTable($output, 300);
        foreach ($rows as $index => $row) {
            foreach ($row as $item) {
                $table[$index][]->content = (string)$item;
            }
        }
        $table->outputTable();
        $output->outputLine();

        $script->shutdown(0);
    }

    if ($options['verbose']) {
        $installer->getLogger()->isVerbose = true;
    }
    $installer->getLogger()->debug(implode(' ', $GLOBALS['argv']));
    $installer->getLogger()->warning("Using installer data: " . $dataDir);
    $installer->getLogger()->warning("Using db: " . $db->DB);

    $continue = true;
    if ($interactive) {
        $question = ezcConsoleQuestionDialog::YesNoQuestion($output, "Continue?", "y");
        $continue = ezcConsoleDialogViewer::displayDialog($question) == "y";
    }
    if (!$continue) {
        $installer->getLogger()->warning("Process aborted by user");
        $script->shutdown(0);
    }

    if ($options['dry-run']) {
        $installer->setDryRun();
    }
    if ($options['ask']) {
        $installer->setIsWaitForUser();
    }

    if ($options['force']) {
        $installer->setIgnoreVersionCheck();
    }

    if ($purgeCache && !$installer->isDryRun()) {
        if ($installer->canInstallSchema()) {
            $cacheDir = eZSys::cacheDirectory();
            $cacheDfsDir = eZINI::instance('file.ini')->variable(
                    'eZDFSClusteringSettings',
                    'MountPointPath'
                ) . $cacheDir;
            $installer->getLogger()->info("Remove cache directories $cacheDfsDir, $cacheDir");
            $continue = true;
            if ($interactive) {
                $question = ezcConsoleQuestionDialog::YesNoQuestion($output, "Continue?", "y");
                $continue = ezcConsoleDialogViewer::displayDialog($question) == "y";
            }
            if (!$continue) {
                $installer->getLogger()->warning("Process aborted by user");
                $script->shutdown(0);
            }
            if (is_dir($cacheDfsDir)) {
                $allowedDirs = $modifiedAllowedDirs = eZINI::instance()->variable(
                    'FileSettings',
                    'AllowedDeletionDirs'
                );
                $dirRealPath = dirname(realpath($cacheDfsDir)) . DIRECTORY_SEPARATOR;
                $modifiedAllowedDirs[] = $dirRealPath;
                eZINI::instance()->setVariable('FileSettings', 'AllowedDeletionDirs', $modifiedAllowedDirs);
                eZDir::recursiveDelete($cacheDfsDir);
                eZINI::instance()->setVariable('FileSettings', 'AllowedDeletionDirs', $allowedDirs);
            }
            if (is_dir($cacheDir)) {
                eZDir::recursiveDelete($cacheDir);
            }
        } else {
            $installer->getLogger()->notice("Purge cache not allowed in {$installer->getType()} installer");
        }
    }

    if ($purgeStorage && !$installer->isDryRun()) {
        if ($installer->canInstallSchema()) {
            $storageDir = eZSys::storageDirectory();
            $storageDfsDir = eZINI::instance('file.ini')->variable(
                    'eZDFSClusteringSettings',
                    'MountPointPath'
                ) . $storageDir;
            $installer->getLogger()->info("Remove storage directories $storageDfsDir, $storageDir");
            $continue = true;
            if ($interactive) {
                $question = ezcConsoleQuestionDialog::YesNoQuestion($output, "Continue?", "y");
                $continue = ezcConsoleDialogViewer::displayDialog($question) == "y";
            }
            if (!$continue) {
                $installer->getLogger()->warning("Process aborted by user");
                $script->shutdown(0);
            }
            if (is_dir($storageDfsDir)) {
                $allowedDirs = $modifiedAllowedDirs = eZINI::instance()->variable(
                    'FileSettings',
                    'AllowedDeletionDirs'
                );
                $dirRealPath = dirname(realpath($storageDfsDir)) . DIRECTORY_SEPARATOR;
                $modifiedAllowedDirs[] = $dirRealPath;
                eZINI::instance()->setVariable('FileSettings', 'AllowedDeletionDirs', $modifiedAllowedDirs);
                eZDir::recursiveDelete($storageDfsDir);
                eZINI::instance()->setVariable('FileSettings', 'AllowedDeletionDirs', $allowedDirs);
            }
            if (is_dir($storageDir)) {
                eZDir::recursiveDelete($storageDir);
            }
        } else {
            $installer->getLogger()->notice("Purge storage not allowed in {$installer->getType()} installer");
        }
    }

    if ($installer->canInstallSchema()) {
        $schemaInstaller = $installer->installSchema(
            $cleanDb,
            $installBaseSchema,
            $installExtensionsSchema,
            $languageList,
            $cleanDataDirectory,
            $installDfsSchema
        );
        if ($cleanDb) {
            $installer->getLogger()->info("Cleanup solr");
            if (!$installer->isDryRun()) {
                $solr = new eZSolr();
                $solr->cleanup(true, true);
            }
        }
    }

    eZINI::instance('file.ini')->setVariable('ClusteringSettings', 'FileHandler', $fileHandler);

    $installerWasRun = false;
    if ($options['update'] && !$installer->canUpdate()){
        $installer->getLogger()->info("No update needed or module is not installed");
    }elseif ($installOnlySchema) {
        $installer->getLogger()->info("Data installation skipped");
    } else {
        if ($installer->needUpdate() || $options['only-step'] !== null || $installer->isDryRun()) {
            $installer->install($options);
            $installerWasRun = true;
            if (!$installer->isDryRun()) {
                if ($installer->canInstallSchema()
                    && $installBaseSchema
                    && $installer->getInstallerVars()->offsetGet('schema_already_exists') === false
                    && isset($schemaInstaller)) {
                    $schemaInstaller->expiryPassword();
                }

                $installer->getLogger()->info("Clear all cache");
                //$cli->setIsQuiet(true);
                $cacheHelper = new eZCacheHelper($cli, $script);
                $cacheHelper->clearItems(eZCache::fetchList(), false);
                //$cli->setIsQuiet($script->isQuiet());

                $optionArray = [
                    'iniFile' => 'site.ini',
                    'iniSection' => 'ContentSettings',
                    'iniVariable' => 'StaticCacheHandler',
                ];
                try {
                    $options = new ezpExtensionOptions($optionArray);
                    /** @var eZStaticCache $staticCacheHandler */
                    $staticCacheHandler = eZExtension::getHandlerClass($options);
                    $staticCacheHandler->generateCache(true, true);
                } catch (Exception $e) {
                    $installer->getLogger()->error($e->getMessage());
                }
            }
        } else {
            $installer->getLogger()->info("No update needed");
        }
    }

    $cli->output("Installer logfile: " . $installer->getLogger()->getLogFilePath());
    if ($installerWasRun) {
        $slackMessage = "[SUCCESS] [$db->DB] The installer $dataDir was run";
    } else {
        $slackMessage = "[INFO] [$db->DB] Do not need to run the installer $dataDir";
    }
    SlackNotify::notify($slackEndpoint, $slackMessage);
} catch (Throwable $e) {
    if ($e instanceof eZDBException) {
        if ($db->TransactionCounter > 0) {
            $db->rollback();
        }
    }

    if ($e instanceof ParseException) {
        $cli->error($e->getMessage() . ' at line ' . $e->getParsedLine() . ' of ' . $e->getParsedFile());
    } else {
        $cli->error($e->getMessage());
    }

    if ($options['debug']) {
        $cli->error('At line ' . $e->getLine() . ' of ' . $e->getFile());
        $cli->output($e->getTraceAsString());
    }
    $slackMessage = "[ERROR] [$db->DB] Running installer " . $options['arguments'][0] . ': ' . $e->getMessage();
    SlackNotify::notify($slackEndpoint, $slackMessage);
}

$script->shutdown();

// php bin/php/ezsqldumpschema.php --type=postgresql --user=openpa --host=db.consorzio-astratto --password= --output-array --output-types=data ez20150103_openpa_rivadelgarda openpa_tools/installer/cleandata/db_data.dba